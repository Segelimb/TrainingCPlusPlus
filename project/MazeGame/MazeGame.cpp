
#include <iostream>

#include <conio.h>

#include "time.h"

#include "windows.h"

using namespace std;

int hx, hy, tstart;
int  score = 0;
int gameState = 0;

const int LX = 20;

const int LY = 30;

// 0 - пустое пространство

// 1 - стена

// 2 - выход

// 3 - игрок

// 4 - монета



int maze[LY][LX] = {

    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},

    {1,1,1,4,1,0,0,0,0,0,0,0,0,0,1,1,0,4,0,2},

    {1,1,0,0,1,1,1,1,0,0,1,1,1,0,1,1,0,0,1,1},

    {1,1,0,1,1,1,1,1,4,1,1,1,1,4,0,0,0,0,1,1},

    {1,1,0,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1},

    {1,1,0,1,0,0,0,1,0,1,1,1,1,1,0,1,1,1,1,1},

    {1,1,0,1,0,0,1,1,0,1,1,1,1,1,0,0,1,1,1,1},

    {1,1,0,1,4,0,1,1,0,1,1,1,1,1,0,0,1,1,1,1},

    {1,1,0,1,0,0,1,1,0,1,0,0,0,0,0,0,0,0,1,1},

    {1,1,0,1,0,0,1,1,0,0,0,1,1,1,1,1,1,1,1,1},

    {1,0,0,0,4,0,0,0,0,1,0,0,0,0,4,0,0,0,0,1},

    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1},

    {1,1,1,1,0,1,1,1,0,0,0,0,0,0,4,1,1,1,0,1},

    {1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,1,1,1,0,1},

    {1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,0,0,1},

    {1,1,1,1,4,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1},

    {1,1,1,1,0,0,0,0,4,0,0,0,0,0,0,0,1,1,1,1},

    {1,1,1,1,0,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1},

    {1,1,1,1,0,1,0,0,4,0,0,0,0,1,1,1,1,1,1,1},

    {1,1,1,1,0,1,0,1,1,1,1,0,0,1,1,1,1,1,1,1},

    {1,1,1,1,0,1,0,1,4,0,0,0,4,0,0,0,0,0,0,1},

    {1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1},

    {1,1,1,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,0,1},

    {1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,0,1},

    {1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1},

    {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},

    {1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},

    {1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},

    {1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,3,1,1,1},

    {1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1}

};



// Функция обновляет текущий счет на экране

void UpdateScore(int score)

{

}



// Функция обновляет оставшееся время до окончания игры

void UpdateClock(clock_t t)

{

}



// Функция печатает в консоли лабиринт

void PrintMaze(int maze[LY][LX], int sizeX, int sizeY)

{

    for (int i = 0; i < sizeY; i++)

    {

        for (int j = 0; j < sizeX; j++)

        {

            switch (maze[i][j])

            {

            case 0:

                cout << ' ';

                break;

            case 1:

                cout << (char)178;

                break;

            case 2:

                cout << (char)176;

                break;

            case 3:

                cout << (char)1;

                break;

            case 4:

                cout << '$';

                break;

            default:

                cout << '?';

            }

        }

        cout << endl;

    }

}



// Функция определяет позицию игрока в массиве, обновляя значения глобальных переменных hx и hy

void FindFirstPlayerPosition(int maze[LY][LX], int sizeX, int sizeY)

{

    for (int i = 0; i < sizeY; i++)  // цикл пробегает массив по строкам

    {

        for (int j = 0; j < sizeX; j++) // цикл пробегает массив по столбцам

        {

            if (maze[i][j] == 3)    // проверяем, если текущий элемент равен 3 - нашли

            {                       // требуемую позицию

                hx = j;             // записываем столбец в hx

                hy = i;             // записываем строку в hy

                return;             // завершаем работу функции

            }

        }

    }

    hx = hy = 0;    // если ничего не нашли - предполагаем, что игрок в позиции 0,0

}                   // это нелогично, но пока ничего предпринимать не будем, решение

                    // этой проблемы будет вашим персональным заданием по рефакторингу игры



// Функция перемещает игрока вверх на одку клетку, если это разрашено

void GoUp()

{

    cout << "Идем вверх" << endl;

}



// Функция перемещает игрока вниз на одку клетку, если это разрашено

void GoDown()

{

    cout << "Идем вниз" << endl;

}



// Функция перемещает игрока вправо на одку клетку, если это разрашено

void GoRight()

{

    cout << "Идем вправо" << endl;

}



//// Функция перемещает игрока влево на одку клетку, если это разрашено

void GoLeft()

{

    cout << "Идем влево" << endl;



}



// Функция обрабатывает события клавиатуры и управляет игрой

void Control()

{

    tstart = clock();  // запоминаем счетчик системного таймера в момент старта игры.

    UpdateScore(score); // обновляем счет игры, изначально он нулевой

    unsigned char x;  // это переменная хранит символ, соответствующий нажатой клавише

    while (gameState == 0)  // цикл игры - пока gameState == 0, игра идет

    {

        UpdateClock(clock());   // обновляем оставшееся время

        if (_kbhit())           // если была нажата клавиша - то обрабатываем ее, иначе следующая

        {                       // итерация игрового цикла

            x = _getch();       // считываем символ нажатой клавиши

            if (x == 27) return;// если это символ Esc (27) то это выход из игры

            if (x == 0xe0)      // если это символ с кодом 0xE0 (шестнадцатеричное)

                switch (_getch()) // то считываем еще один символ (некоторые клавиши выдают двойные коды)

                {

                case 72:          // если 2-й символ код 72, то это клавиша курсор вверх

                    GoUp();       // идем вверх

                    break;

                case 80:          // если 2-й символ код 80, то это клавиша курсор вниз

                    GoDown();   // идем вниз

                    break;

                case 75:        // если 2-й символ код 75, то это клавиша курсор влево

                    GoLeft();   // идем влево

                    break;

                case 77:

                    GoRight();  // если 2 - й символ код 77, то это клавиша курсор вправо

                    break;      // идем вправо

                }

        }

        Sleep(200);             // останавливаем игру на 200 мсек, если этого не делать, то

    }                           // обновление игры будет слишком быстрым, мы не сможем управлять

}                               // игроком, а также напрасно нагрузим процессор ненужной работой



int main()

{

    system("mode con cols=80 lines=31");

    system("cls");

    PrintMaze(maze, LX, LY);

    FindFirstPlayerPosition(maze, LX, LY);

    Control();

}